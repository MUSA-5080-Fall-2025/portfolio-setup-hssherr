# change working directory
setwd("labs/lab0/data/")
setwd("~/GitHub/portfolio-setup-hssherr/labs/lab0/data")
setwd("~/GitHub/portfolio-setup-hssherr/labs/lab0")
# Load the tidyverse library
library(tidyverse)
# Read in the car sales data
# Make sure the data file is in your lab_0/data/ folder
car_data <- read_csv("data/car_sales_data.csv")
# Use glimpse() to see the data structure
glimpse(car_data)
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Look at the tibble version (what we have)
car_data
car_df
# Look at the tibble version (what we have)
car_data
# Look at the tibble version (what we have)
car_data
car_df
# Look at the tibble version (what we have)
car_data
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
car_df
# Look at the tibble version (what we have)
car_data
car_df
View(car_data)
# Look at the tibble version (what we have)
car_data
car_df
# Convert to regular data frame and display
car_df <- as.data.frame(car_data)
# Look at the tibble version (what we have)
car_data
car_df
# Select just Model and Mileage columns
select(.data = car_df, Model, Mileage)
# Challenge: Select all columns EXCEPT Engine Size
car_df %>% select(-`Engine size`)
# Select Manufacturer, Price, and Fuel type
car_df %>% select(Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
car_df %>% select(-`Engine size`)
# Rename 'Year of manufacture' to year
car_df <- car_df %>%
rename(`Year of manufacture` = year)
# Rename 'Year of manufacture' to year
car_df <- car_df %>%
rename(year = `Year of manufacture`)
View(car_df)
# Check that it worked
names(car_data)
# Create a mileage_per_year column
car_df <- car_df %>%
mutate(age = 2025 - year
mileage_per_year = Mileage / age)
# Create a mileage_per_year column
car_df <- car_df %>%
mutate(age = 2025 - year,
mileage_per_year = Mileage / age)
View(car_df)
# Look at your new columns
select(car_data, Model, year, age, Mileage, mileage_per_year)
# Look at your new columns
car_df <- select(Model, year, age, Mileage, mileage_per_year)
# Look at your new columns
car_df %>% select(Model, year, age, Mileage, mileage_per_year)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is high-end (use case_when)
car_df <- car_df %>%
mutate(pricee_category = case_when(Price < 15000 ~ "budget",
Price >= 15000 & Price < 30000 ~ "midrange",
.default = "high-end"))
# Select just Model and Mileage columns
select(.data = car_data, Model, Mileage)
# Select Manufacturer, Price, and Fuel type
car_data %>% select(Manufacturer, Price, `Fuel type`)
# Challenge: Select all columns EXCEPT Engine Size
car_data %>% select(-`Engine size`)
# Rename 'Year of manufacture' to year
car_data <- car_data %>%
rename(year = `Year of manufacture`)
# Check that it worked
names(car_data)
# Create a mileage_per_year column
car_data <- car_data %>%
mutate(age = 2025 - year,
mileage_per_year = Mileage / age)
# Look at your new columns
car_data %>% select(Model, year, age, Mileage, mileage_per_year)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is high-end (use case_when)
car_data <- car_data %>%
mutate(pricee_category = case_when(Price < 15000 ~ "budget",
Price >= 15000 & Price < 30000 ~ "midrange",
.default = "high-end"))
# Check your categories select the new column and show it
car_data
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is high-end (use case_when)
car_data <- car_data %>%
mutate(price_category = case_when(Price < 15000 ~ "budget",
Price >= 15000 & Price < 30000 ~ "midrange",
.default = "high-end"))
car_data <- car_data %>% select(-pricee_category)
# Check your categories select the new column and show it
car_data %>% select(Price, price_category)
unique(car_data$Manufacturer)
# Find all Toyota cars
toyotas <- car_data %>% filter(Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
under_30k_miles <- car_data %>% filter(Mileage < 30000)
# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is luxury (use case_when)
car_data <- car_data %>%
mutate(price_category = case_when(Price < 15000 ~ "budget",
Price >= 15000 & Price < 30000 ~ "midrange",
.default = "luxury"))
# Check your categories select the new column and show it
car_data %>% select(Price, price_category)
# Find all Toyota cars
toyotas <- car_data %>% filter(Manufacturer == "Toyota")
# Find cars with mileage less than 30,000
under_30k_miles <- car_data %>% filter(Mileage < 30000)
# Find luxury cars (from price category) with low mileage
luxury_lowMiles <- car_data %>% filter(price_category == "luxury")
# Find luxury cars (from price category) with low mileage
luxury_lowMiles <- car_data %>% filter(price_category == "luxury" & Mileage < 30000)
# Find cars that are EITHER Honda OR Nissan
honda_nissan <- car_data %>% filter(Manufacturer %in% c("Nissan", "Honda"))
View(honda_nissan)
unique(car_data$Model)
unique(car_data$Manufacturer)
# Find cars with price between $20,000 and $35,000
car_data %>% filter(Price > 20000 & Price < 35000)
# Find diesel cars less than 10 years old
car_data %>% filter(age < 10)
# Find cars that are EITHER Ford OR Porsche
car_data %>% filter(Manufacturer %in% c("Ford", "Porsche"))
# Find cars with price between $20,000 and $35,000
car_data %>% filter(Price > 20000 & Price < 35000)
# Find diesel cars less than 10 years old
car_data %>% filter(age < 10)
# Find diesel cars less than 10 years old
car_data %>% filter(`Fuel type` = "Diesel" & age < 10)
# Find diesel cars less than 10 years old
car_data %>% filter(`Fuel type` == "Diesel" & age < 10)
car_df %>% head(5)
car_df %>% head(10)
# Calculate average price by manufacturer
avg_price_by_brand <- car_data %>%
group_by(Manufacturer) %>%
summarize(avg_price = mean(Price, na.rm = TRUE))
avg_price_by_brand
# Calculate average mileage by fuel type
avg_mileage_by_fuel <- car_data %>%
group_by(`Fuel type`) %>%
summarize(avg_mileage = mean(Mileage, na.rm = T))
avg_mileage_by_fuel
avg_price_by_brand
# Count cars by manufacturer
count_by_manufacturer <- car_data %>%
group_by(Manufacturer) %>%
summarize(count = n())
count_by_manufacturer
sum(count_by_manufacturer$count)
# Frequency table for price categories
table(car_data$price_category)
# Frequency table for price categories
car_data %>%
group_by(price_category) %>%
table(car_data$price_category)
# Frequency table for price categories
price_cat_freq_table <- car_data %>%
group_by(price_category) %>%
summarize(count = n()) %>%
mutate(freq = count / sum(count))
price_cat_freq_table
Sys.getenv("CENSUS_API_KEY")
## Reflection
- **What was most interesting**
