# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(pacman)
p_load(tidyverse, tidycensus, knitr)
Sys.getenv("CENSUS_API_KEY")
key <- Sys.getenv("CENSUS_API_KEY")
census_api_key(key)
census_api_key(key, install = T)
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "ME"
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(pacman)
p_load(tidyverse, tidycensus, knitr)
# Set your Census API key
# I already have it installed and saved in R
key <- Sys.getenv("CENSUS_API_KEY")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "ME"
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(pacman)
p_load(tidyverse, tidycensus, knitr)
# Set your Census API key
# I already have it installed and saved in R
key <- Sys.getenv("CENSUS_API_KEY")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "ME"
data_acs <- get_acs(state = "ME",
geography = "county",
variables = c("med_hh_income" = "B19013_001",
"tot_pop" = "B01003_001"),
year = 2022,
survey = "acs5",
output = "wide")
View(data_acs)
data_acs <- get_acs(state = "ME",
geography = "county",
variables = c("med_hh_inc" = "B19013_001",
"tot_pop" = "B01003_001"),
year = 2022,
survey = "acs5",
output = "wide")
acs_ME <- get_acs(state = "ME",
geography = "county",
variables = c("med_hh_inc" = "B19013_001",
"tot_pop" = "B01003_001"),
year = 2022,
survey = "acs5",
output = "wide")
# Clean the county names to remove state name and "County"
acs_ME <- acs_ME %>%
mutate(NAME = str_remove("County, Maine", NAME))
# Clean the county names to remove state name and "County"
acs_ME <- acs_ME %>%
mutate(NAME = str_remove(regex(" County, Maine", ignore_case = T), NAME))
# Clean the county names to remove state name and "County"
test <- acs_ME %>%
mutate(NAME = str_remove(NAME, regex(" County, Maine", ignore_case = T)))
View(test)
# Clean the county names to remove state name and "County"
test <- acs_ME %>%
mutate(NAME = str_tr(NAME, regex(" County, Maine")))
# Clean the county names to remove state name and "County"
test <- acs_ME %>%
mutate(NAME = str_remove(NAME, regex(" County, Maine")))
# Clean the county names to remove state name and "County"
test <- acs_ME %>%
mutate(NAME = str_remove(NAME, " County, Maine"))
View(acs_ME)
# Clean the county names to remove state name and "County"
test <- acs_ME %>%
mutate(NAME = str_remove(NAME, " County, Maine"))
acs_ME <- get_acs(state = "ME",
geography = "county",
variables = c("med_hh_inc" = "B19013_001",
"tot_pop" = "B01003_001"),
year = 2022,
survey = "acs5",
output = "wide")
acs_ME <- get_acs(state = "ME",
geography = "county",
variables = c("med_hh_inc" = "B19013_001",
"tot_pop" = "B01003_001"),
year = 2022,
survey = "acs5",
output = "wide")
# Clean the county names to remove state name and "County"
test <- acs_ME %>%
mutate(NAME = str_remove(NAME, " County, Maine"))
# Clean the county names to remove state name and "County"
acs_ME_trim <- acs_ME %>%
mutate(NAME = str_remove(NAME, " County, Maine"))
# Display the first few rows
acs_ME_trim %>% head(5)
# Calculate MOE percentage and reliability categories using mutate()
acs_ME_MOEpct <- acs_ME_trim %>%
mutate(med_hh_inc_Mpct = med_hh_incM/med_hh_incE * 100,
tot_pop_Mpct = tot_popM/tot_popE * 100,
med_hh_inc_conf = case_when(med_hh_inc_Mpct < 0.05 ~ "High Confidence",
med_hh_inc_Mpct >= 0.05 & med_hh_inc_Mpct <= 0.1 ~ "Moderate Confidence",
med_hh_inc_Mpct > 0.1 ~ Low Confidence,
# Calculate MOE percentage and reliability categories using mutate()
acs_ME_MOEpct <- acs_ME_trim %>%
mutate(med_hh_inc_Mpct = med_hh_incM/med_hh_incE * 100,
tot_pop_Mpct = tot_popM/tot_popE * 100,
med_hh_inc_conf = case_when(med_hh_inc_Mpct < 0.05 ~ "High Confidence",
med_hh_inc_Mpct >= 0.05 & med_hh_inc_Mpct <= 0.1 ~ "Moderate Confidence",
med_hh_inc_Mpct > 0.1 ~ "Low Confidence",
.default = NA),
tot_pop_conf = case_when(tot_pop_Mpct < 0.05 ~ "High Confidence",
tot_pop_Mpct >= 0.05 & tot_pop_Mpct <= 0.1 ~ "Moderate Confidence",
tot_pop_Mpct > 0.1 ~ Low Confidence,
# Calculate MOE percentage and reliability categories using mutate()
acs_ME_MOEpct <- acs_ME_trim %>%
mutate(med_hh_inc_Mpct = med_hh_incM/med_hh_incE * 100,
tot_pop_Mpct = tot_popM/tot_popE * 100,
med_hh_inc_conf = case_when(med_hh_inc_Mpct < 0.05 ~ "High Confidence",
med_hh_inc_Mpct >= 0.05 & med_hh_inc_Mpct <= 0.1 ~ "Moderate Confidence",
med_hh_inc_Mpct > 0.1 ~ "Low Confidence",
.default = NA),
tot_pop_conf = case_when(tot_pop_Mpct < 0.05 ~ "High Confidence",
tot_pop_Mpct >= 0.05 & tot_pop_Mpct <= 0.1 ~ "Moderate Confidence",
tot_pop_Mpct > 0.1 ~ "Low Confidence",
.default = NA))
View(acs_ME_MOEpct)
# Create a summary showing count of counties in each reliability category
acs_ME_reliability <- acs_ME_MOEpct %>%
group_by(med_hh_inc_conf) %>%
summarize(count = n())
View(acs_ME_reliability)
# Calculate MOE percentage and reliability categories using mutate()
acs_ME_MOEpct <- acs_ME_trim %>%
mutate(med_hh_inc_Mpct = med_hh_incM/med_hh_incE * 100,
tot_pop_Mpct = tot_popM/tot_popE * 100,
med_hh_inc_conf = case_when(med_hh_inc_Mpct < 5 ~ "High Confidence",
med_hh_inc_Mpct >= 5 & med_hh_inc_Mpct <= 10 ~ "Moderate Confidence",
med_hh_inc_Mpct > 10 ~ "Low Confidence",
.default = NA),
tot_pop_conf = case_when(tot_pop_Mpct < 5 ~ "High Confidence",
tot_pop_Mpct >= 5 & tot_pop_Mpct <= 10 ~ "Moderate Confidence",
tot_pop_Mpct > 10 ~ "Low Confidence",
.default = NA))
# Create a summary showing count of counties in each reliability category
acs_ME_reliability <- acs_ME_MOEpct %>%
group_by(med_hh_inc_conf) %>%
summarize(count = n())
print(acs_ME_reliability)
# Create table of top 5 counties by MOE percentage
acs_ME_top5Mpct <- acs_ME_MOEpct %>%
arrange(desc(med_hh_inc_Mpct))
View(acs_ME_top5Mpct)
# Create table of top 5 counties by MOE percentage
acs_ME_top5Mpct <- acs_ME_MOEpct %>%
arrange(desc(med_hh_inc_Mpct)) %>%
slice(n = 5)
# Create table of top 5 counties by MOE percentage
acs_ME_top5Mpct <- acs_ME_MOEpct %>%
arrange(desc(med_hh_inc_Mpct)) %>%
slice_head(n = 5)
# Create table of top 5 counties by MOE percentage
acs_ME_top5Mpct <- acs_ME_MOEpct %>%
arrange(desc(med_hh_inc_Mpct)) %>%
slice_head(n = 5) %>%
select(NAME, med_hh_incE, med_hh_inc_Mpct)
# Create table of top 5 counties by MOE percentage
acs_ME_top5Mpct <- rbind(
acs_ME_MOEpct %>%
arrange(desc(med_hh_inc_Mpct)) %>%
slice_head(n = 5) %>%
select(NAME, med_hh_incE, med_hh_inc_Mpct),
acs_ME_MOEpct %>%
arrange(desc(tot_pop_Mpct)) %>%
slice_head(n = 5) %>%
select(NAME, tot_popE, tot_pop_Mpct)
)
# Create table of top 5 counties by MOE percentage
acs_ME_top5Mpct <- cbind(
acs_ME_MOEpct %>%
arrange(desc(med_hh_inc_Mpct)) %>%
slice_head(n = 5) %>%
select(NAME, med_hh_incE, med_hh_inc_Mpct),
acs_ME_MOEpct %>%
arrange(desc(tot_pop_Mpct)) %>%
slice_head(n = 5) %>%
select(NAME, tot_popE, tot_pop_Mpct)
)
kable(acs_ME_top5Mpct, format = "text")
kable(acs_ME_top5Mpct, format = "txt")
kable(acs_ME_top5Mpct)
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "CA"
acs_ME <- get_acs(state = my_state,
geography = "county",
variables = c("med_hh_inc" = "B19013_001",
"tot_pop" = "B01003_001"),
year = 2022,
survey = "acs5",
output = "wide")
acs_ME <- get_acs(state = my_state,
geography = "county",
variables = c("med_hh_inc" = "B19013_001",
"tot_pop" = "B01003_001"),
year = 2022,
survey = "acs5",
output = "wide")
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(pacman)
p_load(tidyverse, tidycensus, knitr)
# Set your Census API key
# I already have it installed and saved in R
key <- Sys.getenv("CENSUS_API_KEY")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "CA"
# Write your get_acs() code here
acs_ME <- get_acs(state = my_state,
geography = "county",
variables = c("med_hh_inc" = "B19013_001",
"tot_pop" = "B01003_001"),
year = 2022,
survey = "acs5",
output = "wide")
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(pacman)
p_load(tidyverse, tidycensus, knitr)
# Set your Census API key
# I already have it installed and saved in R
key <- Sys.getenv("CENSUS_API_KEY")
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "CA"
acs_ME <- get_acs(state = my_state,
geography = "county",
variables = c("med_hh_inc" = "B19013_001",
"tot_pop" = "B01003_001"),
year = 2022,
survey = "acs5",
output = "wide")
